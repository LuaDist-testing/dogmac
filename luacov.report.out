==============================================================================
/home/me/.luarocks/lib/luarocks/rocks/dogmac/1.0.beta1-0/bin/dogmac
==============================================================================
     #!/usr/bin/env lua

     --enable LuaCov if needed
 100 for _, val in ipairs({...}) do
  75   if val == "-c" then require("luacov") end
     end

     --imports
  25 local cli = require("cliargs")

     --internal data
  25 local VERSION = "1.0.beta1"
     local FOOT = [[
     Proudly made with â™¥ in Valencia, Spain, EU.
     Copyright (c) 2017 Justo Labs.
  25 ]]

     --command line definition
  25 cli:set_name("dogmac")
  25 cli:set_description("Compiler for the Dogma language.")

 175 cli:command("lint", "Check syntax.")
  25    :splat("input", "File or dir to check.", nil, 100)
  25    :option("-t, --type=lex|syn", "Type check.", "syn")
  25    :flag("-l, --list", "List the files.", false)
  25    :flag("-s, --show", "Show tokens or sentences.", false)
  25    :flag("-c", "Enable LuaCov (for internal use).", false)
  38    :action(function(opts) os.exit(require("dogmac.linter")(opts)) end)

 125 cli:command("js", "Transform/transpile to JavaScript.")
  25    :splat("input", "File or dir to check.", nil, 100)
  25    :option("-o, --out=dir", "Transform into the given dir.")
  25    :flag("-c", "Enable LuaCov (for internal use).", false)
  33    :action(function(opts) os.exit(require("dogmac.js")(opts)) end)

  25 cli:flag("-h, --help", "Show this help.", false)
  25 cli:flag("-v, --version", "Show version.", false, function() print(VERSION); os.exit() end)
  25 cli:flag("-c", "Enable LuaCov (for internal use).", false)

     ----------
     -- main --
     ----------

  25 local args, err = cli:parse()

   4 if not args and err then
   4   if err:find("^Usage:") then print() end
   4   print(err)
   4   if err:find("^Usage:") then print(FOOT) end

   4   if err:find("^Usage:") then
   3     os.exit()
       else
   1     os.exit(1)
       end
     end

==============================================================================
/home/me/.luarocks/share/lua/5.3/dogmac/js.lua
==============================================================================
     --imports
   8 local path = require("pl.path")
   8 local file = require("pl.file")
   8 local dir = require("pl.dir")
   8 local Parser = require("dogma.syn.Parser")

     local function transJs(opts)
   5   local Trans = require("dogma.trans.js.Trans")
   5   local parser, trans = Parser.new(), Trans.new()

   5   trans:transform(parser)

       local function transFile(opts)
         local code

  12     local ok, res = pcall(function()
   6       parser:parse(file.read(opts.src))
   6       code = trans:next({importDogmalang = true})

   5       dir.makepath(path.dirname(opts.dst))
   5       file.write(opts.dst, code)
         end)

   6     if not ok then
   1       error(opts.src  .. ": " .. require("pl.stringx").splitlines(res)[1]:match("^.+%.lua:[0-9]+: (.+)$"))
         end
       end

   8   for _, i in ipairs(opts.input) do
   5     if path.isfile(i) then
   6       transFile({
   3         src = i,
   3         dst = path.join(opts.out, path.basename(i):gsub("%.dog$", "") .. ".js"):gsub("%.js%.js", ".js")
   2       })
   2     elseif path.isdir(i) then
   6       for e, d in dir.dirtree(i) do
   5         if not d and (e:find("%.dog$") and not e:find("%.py%.dog$")) then
   6           transFile({
   3             src = e,
   3             dst = path.join(opts.out, e:gsub(i .. "/", ""):gsub("%.dog$", "") .. ".js"):gsub("%.js%.js$", ".js")
               })
             end
           end
         else
   1       print(string.format("'%s' doesn't exist.", i))
   1       os.exit(1)
         end
       end
     end

     return function(opts)
   8   if opts.out == nil then
   2     print("out expected.")
   2     return 1
       end

   6   if #opts.input == 0 then
   1     print("input expected.")
   1     return 1
       end

  10   local ok, res = pcall(function()
   5     return transJs(opts)
       end)

   4   if not ok then
   1     res = require("pl.stringx").splitlines(res)[1]
   1     print(res:match("^.+%.lua:[0-9]+: (.+)"))
   1     return 1
       end
     end

==============================================================================
/home/me/.luarocks/share/lua/5.3/dogmac/linter.lua
==============================================================================
     --imports
  13 local path = require("pl.path")
  13 local file = require("pl.file")
  13 local dir = require("pl.dir")

     --Perform a scanning.
     --
     --@param opts:map
     local function scan(opts)
   6   local Lexer = require("dogma.lex.Lexer")
   6   local lex = Lexer.new()

       local function scanFile(f)
   7     lex:scan(file.read(f), f)

   7     if opts.list or opts.show then
   2       print("=> FILE: " .. f)
         end

         while true do
 110       local tok = lex:next()

 109       if tok == nil then
             break
           else
 103         if opts.show then print(tok) end
           end
         end
       end

  11   for _, i in ipairs(opts.input) do
   7     if path.isfile(i) then
   5       scanFile(i)
   2     elseif path.isdir(i) then
   3       for e, d in dir.dirtree(i) do
   2         if not d and e:find("%.dog$") then
   2           scanFile(e)
             end
           end
         else
   1       print(string.format("'%s' doesn't exist.", i))
   1       os.exit(1)
         end
       end
     end

     local function parse(opts)
   7   local Parser = require("dogma.syn.Parser")
   7   local parser = Parser.new()

       local function parseFile(f)
   7     parser:parse(file.read(f), f)

   7     if opts.list or opts.show then
   2       print("=> FILE: " .. f)
         end

         while true do
  14       local sent = parser:next()

  13       if sent == nil then
             break
           end
   7       if opts.show then
   1         print(string.format("%s (%s, %s) => %s", sent.type, sent.line, sent.col, sent.subtype))
           end
         end
       end

  12   for _, i in ipairs(opts.input) do
   7     if path.isfile(i) then
   5       parseFile(i)
   2     elseif path.isdir(i) then
   3       for e, d in dir.dirtree(i) do
   2         if not d and e:find("%.dog$") then
   2           parseFile(e)
             end
           end
         else
   1       print(string.format("'%s' doesn't exist.", i))
   1       os.exit(1)
         end
       end
     end

     return function(opts)
  13   if opts.type == "lex" then
   6     return scan(opts)
       else
   7     return parse(opts)
       end
     end

==============================================================================
Summary
==============================================================================

File                                                                Hits Missed Coverage
----------------------------------------------------------------------------------------
/home/me/.luarocks/lib/luarocks/rocks/dogmac/1.0.beta1-0/bin/dogmac 30   0      100.00%
/home/me/.luarocks/share/lua/5.3/dogmac/js.lua                      40   0      100.00%
/home/me/.luarocks/share/lua/5.3/dogmac/linter.lua                  41   0      100.00%
----------------------------------------------------------------------------------------
Total                                                               111  0      100.00%
